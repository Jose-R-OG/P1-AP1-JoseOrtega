@page "/huacales/Create"

@inject ToastService toastService
@inject EntradasHuacalesServices entradasHuacalesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Crear Entrada huacales</PageTitle>
<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />
<EditForm Model="entradasHuacales" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h3 class="card-title"> Crear Entradas de Huacales</h3>
			</div>

			<div class="card-body">

				@*Fecha*@
				<div class="mb-3">
					<label class="form-label"><strong>Fecha</strong></label>
					<InputDate class="form-control" @bind-Value="entradasHuacales.Fecha"></InputDate>
					<ValidationMessage For="@(() => entradasHuacales.Fecha)" />
				</div>

				@*Nombre cliente*@
				<div class="mb-3">
					<label class="form-label"><strong>Nombres Cliente</strong></label>
					<InputText class="form-control" @bind-Value="entradasHuacales.NombreCliente" />
					<ValidationMessage For="@(() => entradasHuacales.NombreCliente)" />
				</div>

				<div class="border border-success p-3 mt-3">
					<h5>Detalles de la Entrada</h5>

					<div class="col-auto input-group align-items-center">

						<label class="col-form-label input-group-text">Tipo:</label>
						<InputSelect class="form-control form-select" @bind-Value="Detalle.TipoId">
							<option disabled value="0">Seleccione un tipo de huacal</option>
							@foreach (var tipo in ListaTipos)
							{
								<option value="@tipo.TipoId">@tipo.Descripcion (Existencia: @tipo.Existencia)</option>
							}
						</InputSelect>

						<label class="col-form-label input-group-text">Cantidad:</label>
						<InputNumber class="form-control" id="quantity-input" @bind-Value="Detalle.Cantidad" />

						<label class="col-form-label input-group-text">Precio:</label>
						<InputNumber class="form-control" id="quantity-input" @bind-Value="Detalle.Precio" />

						<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><span class="bi bi-plus"/> Agregar</button>
					</div>

					<table class="table table-light">
						<thead class="table table-striped table-bordered">
							<tr class="text-center">
								<th>Tipo</th>
								<th>Cantidad</th>
								<th>Precio</th>
								<th>Importe</th>
								<th>Remover</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in entradasHuacales.EntradaHuacaleDetalle)
							{
								<tr class="text-center">
									<td>@ListaTipos.FirstOrDefault(t => t.TipoId == detalle.TipoId)?.Descripcion</td>
									<td>@detalle.Cantidad</td>
									<td>@detalle.Precio<strong>RD$</strong></td>
									<td>@(detalle.Cantidad * detalle.Precio)<strong>RD$</strong></td>
									<td>
										<button type="button" class="btn btn-outline-danger" @onclick="() => QuitarDetalle(detalle)"><span class="bi bi-trash" /></button>
									</td>
								</tr>
							}
						</tbody>
					</table>
					<hr />
				</div>

				<div class="row">
					<div class="col-3 offset-6">
						<div class="mb-3">
							<label class="form-label"><strong>Cantidad</strong></label>
							<label class="form-control text-end"><strong>@entradasHuacales.Cantidad</strong></label>
							<ValidationMessage For="@(() => entradasHuacales.Cantidad)" />
						</div>
					</div>

					<div class="col-3">
						<div class="mb-3">
							<label class="form-label"><strong>Importe</strong></label>
							<label class="form-control text-end"><strong>RD$@Math.Round(entradasHuacales.Importe, 2)</strong></label>
							<ValidationMessage For="@(() => entradasHuacales.Importe)" />
						</div>
					</div>
				</div>



			</div>

			@*Footer*@
			<div class="card-footer text-center mt-2">
				<div class="btn-group">
					@if(!creado)
					{
						<button type="submit" class="btn btn-outline-success bi bi-check-circle"> Guardar</button>
					}
					<a href="/huacales/index" class="btn btn-outline-secondary bi bi-arrow-bar-left"> Volver</a>
				</div>

			</div>

		</div>
	</div>

</EditForm>

@code {
	public EntradasHuacales entradasHuacales { get; set; } = new EntradasHuacales();
	public EntradasHuacalesDetalle Detalle = new();
	public List<TiposHuacales> ListaTipos { get; set; } = [];
	public bool creado { get; set; } = false;


	protected override async Task OnInitializedAsync()
	{
		ListaTipos = await entradasHuacalesServices.ListarTipos();
	}

	private void AgregarDetalle()
	{
		if (Detalle.TipoId < 1)
		{
			toastService.ShowWarning("Seleccione el tipo de huacal");
			return;
		}
		else if (Detalle.Cantidad < 1)
		{
			toastService.ShowWarning("La cantidad de huacales debe ser mayor que cero");
			return;
		}
		else if (Detalle.Precio < 0.01)
		{
			toastService.ShowWarning("El precio de los huacales debe ser mayor que cero");
			return;
		}
		entradasHuacales.EntradaHuacaleDetalle.Add(Detalle);
		entradasHuacales.Cantidad = entradasHuacales.EntradaHuacaleDetalle.Sum(d => d.Cantidad);
		entradasHuacales.Importe = entradasHuacales.EntradaHuacaleDetalle.Sum(d => d.Cantidad * d.Precio);
		Detalle = new EntradasHuacalesDetalle();
	}


	public void QuitarDetalle(EntradasHuacalesDetalle detalle)
	{
		entradasHuacales.EntradaHuacaleDetalle.Remove(detalle);
		entradasHuacales.Cantidad = entradasHuacales.EntradaHuacaleDetalle.Sum(d => d.Cantidad);
		entradasHuacales.Importe = entradasHuacales.EntradaHuacaleDetalle.Sum(d => d.Cantidad * d.Precio);
		Detalle = detalle;
	}

	public async Task Guardar()
	{
		creado = await entradasHuacalesServices.Guardar(entradasHuacales);
		if (creado)
		{
			toastService.ShowSuccess("La entrada se guardo correctamente");
			await Task.Delay(4000);
			navigationManager.NavigateTo("/huacales/index");
		}
		else toastService.ShowError("No se pudo guardar la entrada");

	}

}
